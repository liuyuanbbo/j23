buildscript {                        // 定义脚本使用资源
    apply from: 'dependencies.gradle' // 引入所需要的依赖库文件
    repositories {                        // 脚本资源仓库
        maven { url "https://maven.aliyun.com/repository/public/" }
        maven { url "https://maven.aliyun.com/repository/spring/" }
        maven { url "https://maven.aliyun.com/repository/spring-plugin/" }
        maven { url "https://maven.aliyun.com/repository/gradle-plugin/" }
        maven { url "https://maven.aliyun.com/repository/google/" }
        maven { url "https://maven.aliyun.com/repository/central/" }
    }
    dependencies {                        // 依赖库
        classpath libraries.'spring-boot-gradle-plugin'
    }
}

group project_group
version project_version
apply from: 'dependencies.gradle' // 引入所需要的依赖库文件

subprojects {
    apply plugin: 'java' // 引入之前的插件
    apply plugin: 'org.springframework.boot' // 引入之前的插件
    apply plugin: 'io.spring.dependency-management' // 引入之前的插件
    sourceCompatibility = project_jdk
    targetCompatibility = project_jdk

    repositories {  // 配置Gradle仓库
        maven { url "https://maven.aliyun.com/repository/public/" }
        maven { url "https://maven.aliyun.com/repository/spring/" }
        maven { url "https://maven.aliyun.com/repository/spring-plugin/" }
        maven { url "https://maven.aliyun.com/repository/gradle-plugin/" }
        maven { url "https://maven.aliyun.com/repository/google/" }
        maven { url "https://maven.aliyun.com/repository/central/" }
        mavenLocal()
        mavenCentral()
    }
    dependencies {  // 公共依赖库管理
        implementation(
                'org.apache.commons:commons-lang3:3.17.0',
                'cn.hutool:hutool-all:5.8.32'
        )
        // 以下为Lombok插件的相关依赖配置
        compileOnly(libraries.'lombok') // 在编译的时候生效
        annotationProcessor(libraries.'lombok') // 在注解的时候让其生效
    }
    test {  // 配置测试任务
        useJUnitPlatform() // 使用JUnit测试平台
    }
    tasks.withType(JavaCompile) {   // 编译编码配置
        options.encoding = 'UTF-8' // 定义编码
    }
    gradle.taskGraph.whenReady {    // 在所有的操作准备好后触发
        tasks.each { task ->    // 找出所有的任务
            if (task.name.contains('test')) {   // 如果现在发现有test任务
                // 如果将enabled设置为true表示要执行测试任务，如果设置为false表示不执行测试任务
                task.enabled = false
            }
        }
    }
}